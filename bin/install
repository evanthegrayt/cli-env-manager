#!/usr/bin/env bash
#==============================================================================#
#>        File: bin/install                                                    #
#> Description: Installation script to help me install my dotfiles across      #
#+              different platforms                                            #
#>      Author: Evan Gray                                                      #
#==============================================================================#
IFS=$'\n'
shopt -s nullglob

readonly INSTALL_PATH="$( cd $( dirname $0 )/../ && pwd -P )"

source $INSTALL_PATH/lib/install_script_helpers.sh
source $INSTALL_PATH/lib/logging.sh
source $INSTALL_PATH/lib/dotfiles.sh
source $INSTALL_PATH/lib/externals.sh
if [[ -f $HOME/.yademrc ]]; then
    readonly RC_FILE="$HOME/.yademrc"
else
    readonly RC_FILE="$INSTALL_PATH/config/yademrc"
fi
source $RC_FILE
readonly USAGE="USAGE: ${0##*/} [OPTIONS]"
readonly LOGFILE="$INSTALL_PATH/log/dotfiles.${LOGFILE_DATESTAMP}.log"
readonly BREW='https://raw.githubusercontent.com/Homebrew/install/master/install'
readonly OS="$( uname -s )"

INSTALL_GEMS=false
PRINT_LOG=false
ENABLE_ITALICS=false
INSTALL_DOTFILES=false
UNINSTALL_DOTFILES=false
REINSTALL_OLD_DOTFILES=false
INSTALL_VIM=false
INSTALL_ZSH=false
INSTALL_BASH=false
INSTALL_MAC_WORK_STUFF=false
BACKUP=false
ALLOW_IGNORED=false
LOCAL=false
CLONE_GITHUB_STUFF=false
LIST_LOGFILES=false
LOGFILE_DATE_TO_PRINT="$LOGFILE_DATESTAMP"

while getopts 'lpP:gcauLfvzbrRBimC:U:F:h' opt; do
    case $opt in
        l)  LIST_LOGFILES=true                           ;;
        a)  ALLOW_IGNORED=true                           ;;
        z)  INSTALL_ZSH=true                             ;;
        b)  INSTALL_BASH=true                            ;;
        R)  REINSTALL_OLD_DOTFILES=true                  ;;
        B)  EXTENSION="$( date +%Y%m%d%H%M%S )"          ;;
        i)  ENABLE_ITALICS=true                          ;;
        m)  INSTALL_MAC_WORK_STUFF=true                  ;;
        C)
            CHANGE_SHELL=$OPTARG
            case $CHANGE_SHELL in
                z|zsh)  CHANGE_SHELL='zsh'               ;;
                b|bash) CHANGE_SHELL='bash'              ;;
                c|csh)  CHANGE_SHELL='csh'               ;;
                *) abort "Must pass '-C [bash|zsh|csh]'" ;;
            esac
            ;;
        u)
            validate_constant DOTFILE_DIR
            UNINSTALL_DOTFILES=true
            ;;
        f)
            validate_constant DOTFILE_DIR
            INSTALL_DOTFILES=true
            ;;
        v)
            validate_constant VIM_REPO
            INSTALL_VIM=true
            ;;
        c)
            validate_constant REPO_DIR
            validate_constant GIT_REPOS
            CLONE_GITHUB_STUFF=true
            ;;
        g)
            validate_constant RUBY_GEMS
            INSTALL_GEMS=true
            ;;
        U)
            validate_constant DOTFILE_DIR
            UNINSTALL_SINGLE=$OPTARG
            if [[ $UNINSTALL_SINGLE =~ ^\. ]]; then
                UNINSTALL_SINGLE=${UNINSTALL_SINGLE#*.}
            fi
            ;;
        F)
            SINGLE_FILE=$OPTARG
            validate_constant DOTFILE_DIR
            if [[ $SINGLE_FILE =~ ^\. ]]; then
                SINGLE_FILE=${SINGLE_FILE#*.}
            fi
            if [[ ! -e $DOTFILE_DIR/$SINGLE_FILE ]]; then
                abort "$DOTFILE_DIR/$SINGLE_FILE not a valid dotfile!"
            fi
            ;;
        L)
            EXTENSION=$( date +%Y%m%d%H%M%S )
            LOCAL=true
            ;;
        p)
            PRINT_LOG=true
            ;;
        P)
            PRINT_LOG=true
            LOGFILE_DATE_TO_PRINT=$OPTARG
            ;;
        h)  print_help                                   ;;
        *)  abort "$USAGE"                               ;;
    esac
done

if (( $# == 0 )); then
    abort "$USAGE"
elif $INSTALL_DOTFILES && [[ -n $SINGLE_FILE ]]; then
    abort "$USAGE\nCannot pass '-f' with '-s FILE'"
elif $UNINSTALL_DOTFILES && [[ -n $UNINSTALL_SINGLE ]]; then
    abort "$USAGE\nCannot pass '-u' with '-U FILE'"
elif $INSTALL_DOTFILES && $UNINSTALL_DOTFILES; then
    abort "$USAGE\nCannot install and uninstall at the same time..."
fi

if $INSTALL_MAC_WORK_STUFF; then
    if [[ "$OS" == 'Darwin' ]]; then
        install_mac_work_stuff
    else
        log "Not on MacOS. Skipping installation of Mac-specific packages."
    fi
fi

if $CLONE_GITHUB_STUFF; then
    [[ -d $REPO_DIR ]] || mkdir $REPO_DIR
    clone_github_stuff
fi

if [[ -n $CHANGE_SHELL ]]; then
    shell="$( grep "$CHANGE_SHELL$" /etc/shells 2>/dev/null | tail -n 1 )"

    if [[ -x "$shell" ]]; then
        log "Changing login shell to $shell."
        chsh -s "$shell"
    else
        log "Cannot change shell; $shell executable not found."
    fi
fi

if [[ -n $UNINSTALL_SINGLE ]]; then
    unlink_dotfile "$UNINSTALL_SINGLE"
elif $UNINSTALL_DOTFILES; then
    for file in $DOTFILE_DIR/*; do
        unlink_dotfile "$file"
    done
fi

if [[ -n $SINGLE_FILE ]]; then
    link_dotfile "$DOTFILE_DIR/$SINGLE_FILE"
elif $INSTALL_DOTFILES; then
    if ! [[ -d $DOTFILE_DIR ]]; then
        log "$DOTFILE_DIR is not a valid directory."
    else
        for file in $DOTFILE_DIR/*; do
            link_dotfile "$file"
        done
    fi
fi

if $ENABLE_ITALICS; then
    if [[ -f $DOTFILE_DIR/xterm-256color.terminfo ]]; then
        log "Enabling italics; sourcing xterm-256color.terminfo"
        tic $DOTFILE_DIR/xterm-256color.terminfo
    else
        log "Italics not enabled; no $DOTFILE_DIR/xterm-256color.terminfo exists"
    fi
fi

if $INSTALL_VIM; then
    if [[ -d $HOME/.vim ]]; then
        if [[ -n $EXTENSION ]]; then
            log "$HOME/.vim exists; moving to $HOME/.vim.$EXTENSION"
            mv $HOME/.vim $INSTALL_PATH/backup/vim.$EXTENSION
        else
            log "$HOME/.vim exists. Run with '-F' to force, or '-B' to back-up"
        fi
    fi
    [[ -d $HOME/.vim ]] || clone_vim
fi

if $INSTALL_ZSH; then
    clone_shell_framework $HOME/.oh-my-zsh \
        https://github.com/robbyrussell/oh-my-zsh.git $ZSH_CUSTOM_REPO
fi

if $INSTALL_BASH; then
    clone_shell_framework $HOME/.bash_it \
        https://github.com/Bash-it/bash-it.git $BASH_CUSTOM_REPO
fi

if $INSTALL_GEMS; then
    install_ruby_gems
fi

if $LIST_LOGFILES; then
    list_logfiles
fi

if $PRINT_LOG; then
    print_log
fi

